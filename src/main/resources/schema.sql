create table if not exists users (
    id BIGINT generated by default as identity,
    nick_name VARCHAR(50) not null,
    first_name VARCHAR(25) not null,
    last_name VARCHAR(25) not null,
    email VARCHAR(50) not null,

    constraint pk_users primary key (id),
    constraint uniq_nick_name unique (nick_name),
    constraint uniq_email unique (email)
);

create table if not exists cars (
    id BIGINT generated by default as identity primary key,
    car_number VARCHAR(6),
    car_region int not null,
    user_id BIGINT not null,

    constraint fk_cars_users foreign key (user_id) references users (id) on delete cascade
);

create table if not exists malfunctions (
    id BIGINT generated by default as identity,
    type_malfunctions VARCHAR(50) not null,
    malfunctions VARCHAR(50) not null,
    create_on TIMESTAMP WITHOUT TIME ZONE not null,
    car_id BIGINT not null,
    helper BIGINT not null,

    constraint pk_malfuntion primary key (id),
    constraint fk_malfunction_car foreign key (car_id) references cars (id) on delete cascade,
    constraint fk_malfunction_user foreign key (helper) references users (id) on delete cascade
);

create table if not exists black_list (
    id BIGINT generated by default as identity,
    user_id BIGINT not null,
    booked_id BIGINT not null,

    constraint pk_black_list primary key (id)
);

create table if not exists like_vault (
    id BIGINT generated by default as identity,
    liker BIGINT not null,
    like_Owner BIGINT not null,

    constraint pk_like_vault primary key (id),
    constraint fk_liker foreign key (liker) references users (id) on delete cascade,
    constraint fk_likeOwner foreign key (like_Owner) references users (id) on delete cascade
    );

create table if not exists block_malfunctions (
     id BIGINT generated by default as identity,
     user_id BIGINT not null,
     block_malfunction VARCHAR(50) not null,

    constraint pk_block_malfunctions primary key (id),
    constraint fk_block_malfunctions_users foreign key (user_id) references users (id) on delete cascade
    );
